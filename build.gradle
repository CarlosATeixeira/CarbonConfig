buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath("com.anatawa12.forge:ForgeGradle:2.3-1.0.+") { changing = true }
        classpath group: 'net.darkhax.curseforgegradle', name: 'CurseForgeGradle', version: '1.1.18'
        classpath group: 'com.modrinth.minotaur', name: 'Minotaur', version: '2.+'
        
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: "com.modrinth.minotaur"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = MC_VERSION + '-' + MOD_VERSION
group = 'carbonconfiglib'
archivesBaseName = 'CarbonConfig'

eclipse {
	classpath {
		downloadJavadoc = true
		downloadSources = true
	}
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"



minecraft {
    version = "1.12.2-14.23.0.2491"
    runDir = "run"
    mappings = "snapshot_20171003"
}

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
    flatDir {
       dirs("libs")
   	}
}

dependencies {
}

sourceSets {
    main {
        java {
 			srcDir "carbonconfig/src/main/java"
 			srcDir "src/main/java"
 		}
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "examplemod",
                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLCorePlugin': "carbonconfiglib.impl.internal.CarbonConfigHooks",
                'FMLCorePluginContainsFMLMod': true
        ])
    }
    dependsOn configurations.runtimeClasspath
	from {
		duplicatesStrategy = DuplicatesStrategy.EXCLUDE
		configurations.runtimeClasspath.findAll { it.name.equalsIgnoreCase('Primitive Collections-0.8.9.jar') }.collect { zipTree(it) }	
	}
}

processResources {
    inputs.property "version", version
    inputs.property "mcversion", MC_VERSION

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        expand 'version':version, 'mcversion':MC_VERSION
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar.finalizedBy('reobfJar')

task publishMods() {
	group 'publishing'
	description 'Publishes the mod to all Mod Distributors'
	doLast {
		System.out.println("Published Mods to Curseforge/Modrinth")
	}
}

publishMods.dependsOn('modrinth')
publishMods.dependsOn('curseforge')

modrinth {
	token = System.getenv("Modrinth_API_Token");
	projectId = 'carbon-config'
	versionName = archivesBaseName.replace(" ", "")+"-"+version
	versionNumber = MOD_VERSION
	versionType = RELEASE_TYPE
	uploadFile = jar
	gameVersions = [MC_VERSION]
	loaders = ['forge']
	
    def changelog = new File(projectDir, "/changelogs/"+MOD_VERSION.replace(".", "")+".md");
    changelog = changelog.exists() ? changelog.getText('UTF-8') : "";
}

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) { 
	mustRunAfter assemble
	group 'publishing'
	description 'Publishes the mod to Curseforge'
	apiToken = System.getenv("Curseforge_API_Token")
		
	def mainFile = upload(898104, jar)
    mainFile.releaseType = RELEASE_TYPE
    mainFile.displayName = archivesBaseName.replace(" ", "")+"-"+version
    
    def changelog = new File(projectDir, "/changelogs/"+MOD_VERSION.replace(".", "")+".md");
    mainFile.changelog = changelog.exists() ? changelog.getText('UTF-8') : "";
    mainFile.changelogType = 'markdown'
    mainFile.addGameVersion(MC_VERSION, 'Server', 'Client')
    mainFile.addJavaVersion('Java 8')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
