plugins {
    id 'java-library'
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.55'
    id 'net.darkhax.curseforgegradle' version '1.1.15'
    id 'com.modrinth.minotaur' version '2.+'
}
version = MC_VERSION + '-' + MOD_VERSION
group = 'carbonconfiglib' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'CarbonConfig-Neoforge'
jarJar.enable()



// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    main {
        java {
 			srcDir "carbonconfig/src/main/java"
 			srcDir "src/main/java"
 		}
    }
}

runs {
    configureEach {
        modSource project.sourceSets.main
        //Required for JIJ iirc.
		dependencies {
    		runtime ':Primitive Collections-0.8.9'
    	}
    }
    client {}
    server {
        programArgument '--nogui'
    }
    gameTestServer {}
    data {
        programArguments.addAll '--mod', "carbonconfig", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
	maven {
        url = "https://www.cursemaven.com"
    }
    flatDir {
       dirs("libs")
   	}
}


dependencies {
    implementation "net.neoforged:neoforge:20.4.211"
	implementation ':Primitive Collections-0.8.9'
	jarJar(group: 'com.github.Speiger', name: 'Primitive Collections', version: '[0.8,0.9)') {
	 	jarJar.pin(it, "0.8.9")
	}
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}


task renameBuild (type: Copy) {
	dependsOn jar
	include "*-all.jar"
    from ('build/libs')
    into ('build/libs')
    rename { name ->  
    	System.out.println('replacing: '+name)
    	name.replace '-all', ''
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task deleteBuild(type: Delete) {
 	delete fileTree('build/libs') {
 		include '*-all.jar'
	}
}

task publishMods() {
	group 'publishing'
	description 'Publishes the mod to all Mod Distributors'
	doLast {
		System.out.println("Published Mods to Curseforge/Modrinth")
	}
}
tasks.jarJar.finalizedBy('renameBuild')
renameBuild.finalizedBy('deleteBuild')
publishMods.dependsOn('modrinth')
publishMods.dependsOn('curseforge')
assemble.mustRunAfter('renameBuild')


modrinth {
	token = System.getenv("Modrinth_API_Token");
	projectId = 'carbon-config'
	versionName = archivesBaseName.replace(" ", "")+"-"+version
	versionNumber = MOD_VERSION
	versionType = RELEASE_TYPE
	uploadFile = jar
	gameVersions = [MC_VERSION]
	loaders = ['neoforge']
	
    def logs = new File(projectDir, "/changelogs/"+MOD_VERSION.replace(".", "")+".md");
    changelog = logs.exists() ? logs.getText('UTF-8') : "";
}

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) { 
	mustRunAfter assemble
	group 'publishing'
	description 'Publishes the mod to Curseforge'
	apiToken = System.getenv("Curseforge_API_Token")
		
	def mainFile = upload(898104, jar)
    mainFile.releaseType = RELEASE_TYPE
    mainFile.displayName = archivesBaseName.replace(" ", "")+"-"+version
    
    def changelog = new File(projectDir, "/changelogs/"+MOD_VERSION.replace(".", "")+".md");
    mainFile.changelog = changelog.exists() ? changelog.getText('UTF-8') : "";
    mainFile.changelogType = 'markdown'
    mainFile.addGameVersion(MC_VERSION, 'Server', 'Client')
    mainFile.addJavaVersion('Java 17')
	mainFile.addModLoader('NeoForge')
}